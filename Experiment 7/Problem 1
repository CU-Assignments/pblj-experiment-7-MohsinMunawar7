1.Build a program to perform CRUD operations (Create, Read, Update, Delete) on a database table Product with columns:
ProductID, ProductName, Price, and Quantity.
The program should include:
Menu-driven options for each operation.
Transaction handling to ensure data integrity.

import java.sql.*;
import java.util.Scanner;

public class ProductManager {
    static final String DB_URL = "jdbc:sqlite:products.db";
    static Connection conn = null;

    public static void main(String[] args) {
        try {
            conn = DriverManager.getConnection(DB_URL);
            createTable();

            Scanner scanner = new Scanner(System.in);
            int choice;

            do {
                System.out.println("\n=== PRODUCT MANAGEMENT MENU ===");
                System.out.println("1. Create Product");
                System.out.println("2. Display Products");
                System.out.println("3. Update Product");
                System.out.println("4. Delete Product");
                System.out.println("5. Exit");
                System.out.print("Choose an option: ");
                choice = scanner.nextInt();
                scanner.nextLine(); // Clear newline

                switch (choice) {
                    case 1 -> createProduct(scanner);
                    case 2 -> displayProducts();
                    case 3 -> updateProduct(scanner);
                    case 4 -> deleteProduct(scanner);
                    case 5 -> System.out.println("Exiting...");
                    default -> System.out.println("Invalid option.");
                }

            } while (choice != 5);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    static void createTable() throws SQLException {
        String sql = """
                CREATE TABLE IF NOT EXISTS Product (
                    ProductID INTEGER PRIMARY KEY,
                    ProductName TEXT NOT NULL,
                    Price REAL,
                    Quantity INTEGER
                );
                """;
        Statement stmt = conn.createStatement();
        stmt.execute(sql);
    }

    static void createProduct(Scanner scanner) {
        try {
            System.out.print("Enter Product ID: ");
            int id = scanner.nextInt();
            scanner.nextLine();
            System.out.print("Enter Product Name: ");
            String name = scanner.nextLine();
            System.out.print("Enter Price: ");
            double price = scanner.nextDouble();
            System.out.print("Enter Quantity: ");
            int quantity = scanner.nextInt();

            conn.setAutoCommit(false);

            String sql = "INSERT INTO Product (ProductID, ProductName, Price, Quantity) VALUES (?, ?, ?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, id);
            pstmt.setString(2, name);
            pstmt.setDouble(3, price);
            pstmt.setInt(4, quantity);
            pstmt.executeUpdate();

            conn.commit();
            System.out.println("Product created successfully.");
        } catch (SQLException e) {
            try {
                conn.rollback();
                System.out.println("Transaction rolled back due to error.");
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            e.printStackTrace();
        }
    }

    static void displayProducts() {
        String sql = "SELECT * FROM Product";
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            System.out.println("Product List:");
            while (rs.next()) {
                System.out.printf("ID: %d | Name: %s | Price: %.2f | Qty: %d%n",
                        rs.getInt("ProductID"),
                        rs.getString("ProductName"),
                        rs.getDouble("Price"),
                        rs.getInt("Quantity"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    static void updateProduct(Scanner scanner) {
        try {
            System.out.print("Enter Product ID to update: ");
            int id = scanner.nextInt();
            scanner.nextLine();
            System.out.print("Enter New Name: ");
            String name = scanner.nextLine();
            System.out.print("Enter New Price: ");
            double price = scanner.nextDouble();
            System.out.print("Enter New Quantity: ");
            int quantity = scanner.nextInt();

            conn.setAutoCommit(false);

            String sql = "UPDATE Product SET ProductName=?, Price=?, Quantity=? WHERE ProductID=?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, name);
            pstmt.setDouble(2, price);
            pstmt.setInt(3, quantity);
            pstmt.setInt(4, id);

            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                conn.commit();
                System.out.println("Product updated successfully.");
            } else {
                conn.rollback();
                System.out.println("No product found with that ID. Update cancelled.");
            }

        } catch (SQLException e) {
            try {
                conn.rollback();
                System.out.println("Transaction rolled back due to error.");
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            e.printStackTrace();
        }
    }

    static void deleteProduct(Scanner scanner) {
        try {
            System.out.print("Enter Product ID to delete: ");
            int id = scanner.nextInt();

            conn.setAutoCommit(false);

            String sql = "DELETE FROM Product WHERE ProductID=?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, id);

            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                conn.commit();
                System.out.println("Product deleted successfully.");
            } else {
                conn.rollback();
                System.out.println("No product found with that ID. Deletion cancelled.");
            }

        } catch (SQLException e) {
            try {
                conn.rollback();
                System.out.println("Transaction rolled back due to error.");
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            e.printStackTrace();
        }
    }
}
=== PRODUCT MANAGEMENT MENU ===
1. Create Product
2. Display Products
3. Update Product
4. Delete Product
5. Exit
Choose an option: 1
Enter Product ID: 101
Enter Product Name: Mouse
Enter Price: 1500
Enter Quantity: 25
Product created successfully.
